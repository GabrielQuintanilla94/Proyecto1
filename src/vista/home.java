package vista;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.function.BiConsumer;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingConstants;
import modelo.SqlMateriales;
import modelo.SqlPrestamos;
import modelo.usuarios;
import org.apache.log4j.Logger;

public class home extends javax.swing.JFrame {

    private static final Logger log = Logger.getLogger(home.class);
    usuarios mod;
    
    private JPanel mainPanel; // Declaración de variable de clase


    public static registro frmReg;
    public static RContraseña frmReCon;
    public static Mora frmMora;
    public static Devoluciones frmDev;
    public static Consultar frmConsulta;
    private String codigoIdentificacion;

    public home(){
        initComponentes();
    }

    public home(usuarios mod) {
        initComponentes();
        setLocationRelativeTo(null);
        this.mod = mod;
       

        if (mod.getId_tipo() == 1) {

        } else if (mod.getId_tipo() == 2) {
            
            btnConfigurar.setVisible(false);
            btnMora.setVisible(false);
            btnRegistrar.setVisible(false);
            btnReContraseña.setVisible(false);
        } else if (mod.getId_tipo() == 3) {
            btnRegistrar.setVisible(false);
            btnReContraseña.setVisible(false);
            btnConfigurar.setVisible(false);
            btnMora.setVisible(false);
            btnIngEjem.setVisible(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnReContraseña = new javax.swing.JButton();
        btnIngEjem = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        btnprestamos = new javax.swing.JButton();
        btnConfigurar = new javax.swing.JButton();
        btnDevoluciones = new javax.swing.JButton();
        btnMora = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 30)); // NOI18N
        jLabel1.setText("Mediateca UDB");

        btnRegistrar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnReContraseña.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnReContraseña.setText("Reestablecer Contraseña");
        btnReContraseña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReContraseñaActionPerformed(evt);
            }
        });

        btnIngEjem.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnIngEjem.setText("Ingresar Ejemplares");
        btnIngEjem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngEjemActionPerformed(evt);
            }
        });

        btnConsulta.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnConsulta.setText("Consultar Ejemplares");
        btnConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaActionPerformed(evt);
            }
        });

        btnprestamos.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnprestamos.setText("Prestamos");
        btnprestamos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprestamosActionPerformed(evt);
            }
        });

        btnConfigurar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnConfigurar.setText("Configuraciones");
        btnConfigurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigurarActionPerformed(evt);
            }
        });

        btnDevoluciones.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnDevoluciones.setText("Devoluciones");
        btnDevoluciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolucionesActionPerformed(evt);
            }
        });

        btnMora.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnMora.setText("Modificar Mora");
        btnMora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoraActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(285, 285, 285)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnReContraseña)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnMora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConfigurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnprestamos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnConsulta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnIngEjem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDevoluciones, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(296, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(btnConsulta)
                .addGap(18, 18, 18)
                .addComponent(btnprestamos)
                .addGap(18, 18, 18)
                .addComponent(btnDevoluciones)
                .addGap(18, 18, 18)
                .addComponent(btnIngEjem)
                .addGap(18, 18, 18)
                .addComponent(btnConfigurar)
                .addGap(18, 18, 18)
                .addComponent(btnMora)
                .addGap(18, 18, 18)
                .addComponent(btnReContraseña)
                .addGap(18, 18, 18)
                .addComponent(btnRegistrar)
                .addContainerGap(139, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

   private void initComponentes() {
    // Inicializar componentes
        jLabel1 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        btnReContraseña = new javax.swing.JButton();
        btnIngEjem = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        btnprestamos = new javax.swing.JButton();
        btnConfigurar = new javax.swing.JButton();
        btnDevoluciones = new javax.swing.JButton();
        btnMora = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mediateca UDB");

        // Crear el menú lateral
        JPanel menuPanel = new JPanel();
        menuPanel.setLayout(new BoxLayout(menuPanel, BoxLayout.Y_AXIS));
        menuPanel.setBackground(Color.DARK_GRAY);
        menuPanel.setPreferredSize(new Dimension(300, getHeight()));

        // Título del menú
        JLabel menuTitle = new JLabel("Mediateca UDB", JLabel.CENTER);
        menuTitle.setForeground(Color.WHITE);
        menuTitle.setFont(new Font("Segoe UI", Font.BOLD, 18));
        menuTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        menuPanel.add(menuTitle);
        menuPanel.add(Box.createRigidArea(new Dimension(0, 20))); // Espaciado

        // Agregar botones al menú lateral
        addMenuButton(menuPanel, btnConsulta, "Consultar Ejemplares", evt -> btnConsultaActionPerformed(evt));
        addMenuButton(menuPanel, btnprestamos, "Préstamos", evt -> btnprestamosActionPerformed(evt));
        addMenuButton(menuPanel, btnDevoluciones, "Devoluciones", evt -> btnDevolucionesActionPerformed(evt));
        addMenuButton(menuPanel, btnIngEjem, "Ingresar Ejemplares", evt -> btnIngEjemActionPerformed(evt));
        menuPanel.add(new JSeparator(SwingConstants.HORIZONTAL));
        addMenuButton(menuPanel, btnConfigurar, "Configuraciones", evt -> btnConfigurarActionPerformed(evt));
        addMenuButton(menuPanel, btnMora, "Modificar Mora", evt -> btnMoraActionPerformed(evt));
        addMenuButton(menuPanel, btnReContraseña, "Reestablecer Contraseña", evt -> btnReContraseñaActionPerformed(evt));
        addMenuButton(menuPanel, btnRegistrar, "Registrar", evt -> btnRegistrarActionPerformed(evt));

        // Área principal
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.setBackground(Color.WHITE);

        ImageIcon originalIcon = new ImageIcon(getClass().getResource("/resources/home.png"));
        int labelWidth = 300;  
        int labelHeight = 300; 

        // Redimensionar la imagen
        Image scaledImage = originalIcon.getImage().getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(scaledImage);

        // Configurar el JLabel
        jLabel1.setIcon(scaledIcon);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setPreferredSize(new Dimension(labelWidth, labelHeight));

        // Agregar paneles al contenedor principal
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(menuPanel, BorderLayout.WEST);
        getContentPane().add(mainPanel, BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }

    private void addMenuButton(JPanel panel, JButton button, String text, java.awt.event.ActionListener action) {
        button.setText(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        button.setForeground(Color.WHITE);
        button.setBackground(Color.GRAY);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setMaximumSize(new Dimension(180, 40));

        // Hover Effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(Color.LIGHT_GRAY);
            }

            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(Color.GRAY);
            }
        });

        // Asignar acción al botón
        button.addActionListener(action);

        panel.add(button);
        panel.add(Box.createRigidArea(new Dimension(0, 10))); // Espaciado entre botones
    }


    
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        if (frmReg == null) {
            frmReg = new registro();
            frmReg.setVisible(true);
           
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnReContraseñaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReContraseñaActionPerformed
        // TODO add your handling code here:
        if (frmReCon == null) {
            frmReCon = new RContraseña();
            frmReCon.setVisible(true);
        }
    }//GEN-LAST:event_btnReContraseñaActionPerformed

    private void btnIngEjemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngEjemActionPerformed
        // Opciones predefinidas para el tipo de material
        String[] opcionesMaterial = { "CDs", "Libros", "Revistas", "DVDs" };

        // Crear un JComboBox con las opciones
        JComboBox<String> comboBoxMaterial = new JComboBox<>(opcionesMaterial);

        // Mostrar un cuadro de diálogo para seleccionar el tipo de material
        int result = JOptionPane.showConfirmDialog(
            this, 
            comboBoxMaterial, 
            "Seleccionar Tipo de Material", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        // Si el usuario selecciona "OK"
        if (result == JOptionPane.OK_OPTION) {
            // Obtener el tipo de material seleccionado
            String materialSeleccionado = comboBoxMaterial.getSelectedItem().toString().toLowerCase();

            // Ejecutar la acción correspondiente según el tipo de material
            switch (materialSeleccionado) {
                case "cds":
                    agregarCD();
                    break;

                case "libros":
                    agregarLibros();
                    break;

                case "revistas":
                    agregarRevistas();
                    break;

                case "dvds": 
                    agregardvds(); 
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Tipo de material no válido", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se seleccionó ningún material.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_btnIngEjemActionPerformed

    private void btnprestamosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprestamosActionPerformed
        // TODO add your handling code here:
        // Opciones para el dropdown
        String[] opcionesMaterial = { "CDs", "Libros", "Revistas", "DVDs" };

        // Crear el JComboBox con las opciones
        JComboBox<String> materialDropdown = new JComboBox<>(opcionesMaterial);

        // Mostrar el JComboBox en un JOptionPane
        int result = JOptionPane.showConfirmDialog(
            this, 
            materialDropdown, 
            "Seleccionar Tipo de Material a Prestar", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        // Validar si el usuario seleccionó OK
        if (result == JOptionPane.OK_OPTION) {
            // Obtener el valor seleccionado
            String materialType = materialDropdown.getSelectedItem().toString().toLowerCase();

            // Ejecutar la acción correspondiente
            switch (materialType) {
                case "cds":
                    prestarCD();
                    break;

                case "libros":
                    prestarLibro();
                    break;

                case "revistas":
                    prestarRevista();
                    break;

                case "dvds":
                    prestardvds();
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Tipo de material no válido", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "No seleccionaste ningún material.", "Información", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnprestamosActionPerformed

    private void btnConfigurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigurarActionPerformed
        // Opciones para el dropdown
        String[] opcionesConfiguracion = { "Alumnos", "Profesores", "CDs", "Libros", "Revistas", "DVDs" };

        // Crear el JComboBox con las opciones
        JComboBox<String> configuracionDropdown = new JComboBox<>(opcionesConfiguracion);

        // Mostrar el JComboBox en un JOptionPane
        int result = JOptionPane.showConfirmDialog(
            this, 
            configuracionDropdown, 
            "Seleccionar Instancia a Configurar", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        // Validar si el usuario seleccionó "Aceptar"
        if (result == JOptionPane.OK_OPTION) {
            // Obtener el valor seleccionado
            String materialType = configuracionDropdown.getSelectedItem().toString().toLowerCase();

            // Ejecutar la acción correspondiente
            switch (materialType) {
                case "cds":
                    configurarCD();
                    break;

                case "libros":
                    configurarLibro();
                    break;

                case "revistas":
                    configurarRevista();
                    break;

                case "dvds":
                    configurardvds();
                    break;

                case "alumnos":
                    configurarAlumnos();
                    break;

                case "profesores":
                    configurarProfesores();
                    break;

                default:
                    JOptionPane.showMessageDialog(this, "Tipo de material no válido", "Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
        } else {
            // Si el usuario presiona "Cancelar", no se realiza ninguna acción
            JOptionPane.showMessageDialog(this, "Operación cancelada.", "Información", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnConfigurarActionPerformed

    private void btnMoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoraActionPerformed
        // TODO add your handling code here:
        
        if (frmMora == null) {
            frmMora = new Mora();
            frmMora.setVisible(true);
        }
        
    }//GEN-LAST:event_btnMoraActionPerformed

    private void btnDevolucionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolucionesActionPerformed
        // TODO add your handling code here:
        if (frmDev == null) {
            frmDev = new Devoluciones();
            frmDev.recibirDato(mod.getId(), mod.getId_tipo() );
            frmDev.setVisible(true);
        }
    }//GEN-LAST:event_btnDevolucionesActionPerformed

    private void btnConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaActionPerformed
        // Opciones para el dropdown
        String[] opcionesMaterial = { "cds", "libros", "revistas", "dvds" };

        // Crear un JComboBox con las opciones
        JComboBox<String> tipoMaterialDropdown = new JComboBox<>(opcionesMaterial);

        // Mostrar el JComboBox en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(
            null, 
            tipoMaterialDropdown, 
            "Seleccionar Material a Consultar", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        // Verificar si el usuario presionó "OK"
        if (result == JOptionPane.OK_OPTION) {
            // Obtener el material seleccionado
            String tipo_material = tipoMaterialDropdown.getSelectedItem().toString();

            // Si el formulario aún no está creado
            if (frmConsulta == null) {
                frmConsulta = new Consultar();

                // Configurar el tipo de material en el formulario
                frmConsulta.setTipoMaterial(tipo_material);
                frmConsulta.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnConsultaActionPerformed

    private void configurarAlumnos(){
        String idtipo = "3";
        String limit = JOptionPane.showInputDialog("Digite el limite de materiales por Alumno:");
        SqlMateriales modSql = new SqlMateriales();
        modSql.configAlumnos(idtipo, limit);
    }
    private void configurarProfesores(){
        String idtipo = "2";
        String limit = JOptionPane.showInputDialog("Digite el limite de materiales por Profesor:");
        SqlMateriales modSql = new SqlMateriales();
        modSql.configAlumnos(idtipo, limit);
    }
    
    private void configurarCD() {
        configurarMaterial("Configurar CD", (codigo, unidades) -> {
            SqlMateriales modSql = new SqlMateriales();
            modSql.configurarDVDs(unidades, codigo);
        });
    }

    private void configurardvds() {
        configurarMaterial("Configurar DVD", (codigo, unidades) -> {
            SqlMateriales modSql = new SqlMateriales();
            modSql.configurarDVDs(unidades, codigo);
        });
    }

    private void configurarRevista() {
        configurarMaterial("Configurar Revista", (codigo, unidades) -> {
            SqlMateriales modSql = new SqlMateriales();
            modSql.configurarRevista(unidades, codigo);
        });
    }

    private void configurarLibro() {
        configurarMaterial("Configurar Libro", (codigo, unidades) -> {
            SqlMateriales modSql = new SqlMateriales();
            modSql.configurarLibro(unidades, codigo);
        });
    }

   
    private void configurarMaterial(String tituloFormulario, BiConsumer<String, String> configurarAccion) {
        // Crear un panel para los campos de entrada
        JPanel panel = new JPanel(new GridLayout(2, 2, 10, 10)); // 2 filas y 2 columnas para etiquetas y campos

        // Campo para el código de identificación
        panel.add(new JLabel("Código de Identificación:"));
        JTextField codigoField = new JTextField();
        panel.add(codigoField);

        // Campo para las unidades disponibles
        panel.add(new JLabel("Unidades Disponibles:"));
        JTextField unidadesField = new JTextField();
        panel.add(unidadesField);

        // Mostrar el formulario en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(
            null,
            panel,
            tituloFormulario,
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        // Validar si el usuario seleccionó "Aceptar"
        if (result == JOptionPane.OK_OPTION) {
            try {
                // Obtener los valores ingresados
                String codigoIdentificacion = codigoField.getText().trim();
                String unidadesDisponibles = unidadesField.getText().trim();

                // Validar que los campos no estén vacíos
                if (codigoIdentificacion.isEmpty() || unidadesDisponibles.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // No continuar si hay campos vacíos
                }

                // Validar que las unidades disponibles sean un número válido
                int unidades = Integer.parseInt(unidadesDisponibles); // Lanza excepción si no es un número

                // Llamar a la acción de configuración específica
                configurarAccion.accept(codigoIdentificacion, String.valueOf(unidades));

                // Confirmación de éxito
                JOptionPane.showMessageDialog(null, tituloFormulario + " realizado con éxito.");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para las unidades disponibles.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si el usuario presiona "Cancelar", no se realiza ninguna acción
            JOptionPane.showMessageDialog(null, "Operación cancelada.");
        }
    }

   
    private void prestarCD() {
        // Crear un panel para los campos de entrada
        JPanel panel = new JPanel(new GridLayout(3, 2, 10, 10)); // 3 filas y 2 columnas para etiquetas y campos

        // Campo para el código de identificación
        panel.add(new JLabel("Código de Identificación:"));
        JTextField codigoField = new JTextField();
        panel.add(codigoField);

        // Campo para seleccionar la fecha de inicio del préstamo
        panel.add(new JLabel("Fecha de Inicio (yyyy-MM-dd):"));
        JSpinner fechaInicioSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(fechaInicioSpinner, "yyyy-MM-dd");
        fechaInicioSpinner.setEditor(dateEditor);
        panel.add(fechaInicioSpinner);

        // Mostrar el panel en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(
            null, 
            panel, 
            "Datos del Préstamo de CD", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        // Validar si el usuario seleccionó "Aceptar"
        if (result == JOptionPane.OK_OPTION) {
            try {
                // Obtener los valores ingresados
                String codigoIdentificacion = codigoField.getText().trim();
                String fechaInicio = dateEditor.getFormat().format(fechaInicioSpinner.getValue()); // Obtener la fecha en el formato correcto

                // Validar que los campos no estén vacíos
                if (codigoIdentificacion.isEmpty() || fechaInicio.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
                    return; // No continuar si hay campos vacíos
                }

                // Llamar a los métodos de la base de datos
                SqlPrestamos modSql = new SqlPrestamos();
                modSql.prestarCD(codigoIdentificacion, mod.getId()); 
                SqlPrestamos modsql = new SqlPrestamos();
                modsql.registrarPrestamo(codigoIdentificacion, mod.getNombre(), fechaInicio);

                // Confirmación de éxito
                JOptionPane.showMessageDialog(null, "Préstamo registrado con éxito.");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ocurrió un error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si el usuario presiona "Cancelar", no se realiza ninguna acción
            JOptionPane.showMessageDialog(null, "Operación cancelada.");
        }
    }


    private void prestarLibro(){
        String codigoidentificacion = JOptionPane.showInputDialog("Digite el Codigo de Identificacion: ");
        String fechaInicio = JOptionPane.showInputDialog("Digite la fecha de Inicio de Prestamo: (yyyy-mm-dd)");

        SqlPrestamos modSql = new SqlPrestamos();
        modSql.prestarLibro(codigoidentificacion,mod.getId());
        
        SqlPrestamos modsql = new SqlPrestamos();
        modsql.registrarPrestamo(codigoidentificacion, mod.getNombre(),fechaInicio);
    }
    private void prestarRevista(){
        String codigoidentificacion = JOptionPane.showInputDialog("Digite el Codigo de Identificacion: ");
        String fechaInicio = JOptionPane.showInputDialog("Digite la fecha de Inicio de Prestamo: (yyyy-mm-dd)");

        SqlPrestamos modSql = new SqlPrestamos();
        modSql.prestarRevista(codigoidentificacion,mod.getId()); 
        
        SqlPrestamos modsql = new SqlPrestamos();
        modsql.registrarPrestamo(codigoidentificacion, mod.getNombre(),fechaInicio);
    }
    private void prestardvds(){
        String codigoidentificacion = JOptionPane.showInputDialog("Digite el Codigo de Identificacion: ");
        String fechaInicio = JOptionPane.showInputDialog("Digite la fecha de Inicio de Prestamo: (yyyy-mm-dd)");
        SqlPrestamos modSql = new SqlPrestamos();
        modSql.prestarTesis(codigoidentificacion,mod.getId());
        SqlPrestamos modsql = new SqlPrestamos();
        modsql.registrarPrestamo(codigoidentificacion, mod.getNombre(),fechaInicio);
    }
    

    public void agregarCD() {
        // Creo un panel para los campos de entrada
        JPanel panel = new JPanel(new GridLayout(7, 2, 10, 10)); // 7 filas y 2 columnas para etiquetas y campos

        panel.add(new JLabel("Título:"));
        JTextField tituloField = new JTextField();
        panel.add(tituloField);

        panel.add(new JLabel("Artista:"));
        JTextField artistaField = new JTextField();
        panel.add(artistaField);

        panel.add(new JLabel("Género:"));
        // Dropdown list para los géneros
        String[] generos = { "Rock", "Pop", "Jazz", "Clásica", "Reggae", "Hip Hop", "Blues", "Metal", "Country", "Electrónica" };
        JComboBox<String> generoDropdown = new JComboBox<>(generos);
        panel.add(generoDropdown);

        panel.add(new JLabel("Duración:"));
        JTextField duracionField = new JTextField();
        panel.add(duracionField);

        panel.add(new JLabel("Número de Canciones:"));
        JTextField numeroCancionesField = new JTextField();
        panel.add(numeroCancionesField);

        panel.add(new JLabel("Ubicación:"));
        JTextField ubicacionField = new JTextField();
        panel.add(ubicacionField);

        panel.add(new JLabel("Unidades:"));
        JTextField unidadesField = new JTextField();
        panel.add(unidadesField);

        // Mostrar el panel en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(null, panel, "Agregar CD", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            try {
                // Obtener los valores ingresados
                String titulo = tituloField.getText();
                String artista = artistaField.getText();
                String genero = generoDropdown.getSelectedItem().toString(); // Obtener el género seleccionado
                String duracion = duracionField.getText();
                int numeroCanciones = Integer.parseInt(numeroCancionesField.getText());
                String ubicacion = ubicacionField.getText();
                int unidades = Integer.parseInt(unidadesField.getText());

                // Llamar al método de la base de datos
                SqlMateriales modSql = new SqlMateriales();
                boolean agregado = modSql.agregarCD(titulo, artista, genero, duracion, ubicacion, numeroCanciones, unidades, unidades-1);

                // Mostrar resultado
                if (agregado) {
                    JOptionPane.showMessageDialog(null, "CD agregado con éxito");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al agregar el CD");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce valores válidos para números.");
            }
        }
}

    
    public void agregarLibros() {
     // Crear un panel para los campos de entrada
        JPanel panel = new JPanel(new GridLayout(8, 2, 10, 10)); // 8 filas y 2 columnas para etiquetas y campos

        panel.add(new JLabel("Título:"));
        JTextField tituloField = new JTextField();
        panel.add(tituloField);

        panel.add(new JLabel("Autor:"));
        JTextField autorField = new JTextField();
        panel.add(autorField);

        panel.add(new JLabel("Páginas:"));
        JTextField paginasField = new JTextField();
        panel.add(paginasField);

        panel.add(new JLabel("Editorial:"));
        JTextField editorialField = new JTextField();
        panel.add(editorialField);

        panel.add(new JLabel("ISBN:"));
        JTextField isbnField = new JTextField();
        panel.add(isbnField);

        panel.add(new JLabel("Fecha Publicación:"));
        // Spinner para la fecha
        JSpinner fechaSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor editor = new JSpinner.DateEditor(fechaSpinner, "yyyy-MM-dd");
        fechaSpinner.setEditor(editor);
        panel.add(fechaSpinner);

        panel.add(new JLabel("Ubicación:"));
        JTextField ubicacionField = new JTextField();
        panel.add(ubicacionField);

        panel.add(new JLabel("Unidades:"));
        JTextField unidadesField = new JTextField();
        panel.add(unidadesField);

        // Mostrar el panel en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(
            null, 
            panel, 
            "Agregar Libro", 
            JOptionPane.OK_CANCEL_OPTION, 
            JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            try {
                // Obtener los valores ingresados
                String titulo = tituloField.getText();
                String autor = autorField.getText();
                int paginas = Integer.parseInt(paginasField.getText());
                String editorial = editorialField.getText();
                String isbn = isbnField.getText();

                // Convertir la fecha a un tipo `String` en formato `yyyy-MM-dd`
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String fechapublicacion = sdf.format((Date) fechaSpinner.getValue());

                String ubicacion = ubicacionField.getText();
                int unidades = Integer.parseInt(unidadesField.getText());

                // Llamar al método de la base de datos
                SqlMateriales modSql = new SqlMateriales();
                boolean agregado = modSql.agregarLibro(titulo, autor, paginas, editorial, isbn, fechapublicacion, ubicacion, unidades);

                // Mostrar resultado
                if (agregado) {
                    JOptionPane.showMessageDialog(null, "Libro agregado con éxito");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al agregar el libro");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce valores válidos para números.");
            }
        }
    }

     public void agregarRevistas() {
        // Crear un panel para los campos de entrada
        JPanel panel = new JPanel(new GridLayout(6, 2, 10, 10)); // 6 filas y 2 columnas para etiquetas y campos

        panel.add(new JLabel("Título:"));
        JTextField tituloField = new JTextField();
        panel.add(tituloField);

        panel.add(new JLabel("Editorial:"));
        JTextField editorialField = new JTextField();
        panel.add(editorialField);

        panel.add(new JLabel("Periodicidad:"));
        // Dropdown list para la periodicidad
        String[] opcionesPeriodicidad = { "Diaria", "Semanal", "Mensual", "Trimestral", "Semestral", "Anual" };
        JComboBox<String> periodicidadDropdown = new JComboBox<>(opcionesPeriodicidad);
        panel.add(periodicidadDropdown);

        panel.add(new JLabel("Fecha Publicación:"));
        // Spinner para la fecha de publicación
        JSpinner fechaSpinner = new JSpinner(new SpinnerDateModel());
        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(fechaSpinner, "yyyy-MM-dd");
        fechaSpinner.setEditor(dateEditor);
        panel.add(fechaSpinner);

        panel.add(new JLabel("Ubicación:"));
        JTextField ubicacionField = new JTextField();
        panel.add(ubicacionField);

        panel.add(new JLabel("Unidades:"));
        JTextField unidadesField = new JTextField();
        panel.add(unidadesField);

        // Mostrar el panel en un cuadro de diálogo
        int result = JOptionPane.showConfirmDialog(
            null,
            panel,
            "Agregar Revista",
            JOptionPane.OK_CANCEL_OPTION,
            JOptionPane.PLAIN_MESSAGE
        );

        if (result == JOptionPane.OK_OPTION) {
            try {
                // Obtener los valores ingresados
                String titulo = tituloField.getText();
                String editorial = editorialField.getText();
                String periodicidad = periodicidadDropdown.getSelectedItem().toString();

                // Convertir la fecha seleccionada a un String en formato yyyy-MM-dd
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String fechapublicacion = sdf.format((Date) fechaSpinner.getValue());

                String ubicacion = ubicacionField.getText();
                int unidades = Integer.parseInt(unidadesField.getText());

                // Llamar al método de la base de datos
                SqlMateriales modSql = new SqlMateriales();
                boolean agregado = modSql.agregarRevista(titulo, editorial, periodicidad, fechapublicacion, ubicacion, unidades);

                // Mostrar resultado
                if (agregado) {
                    JOptionPane.showMessageDialog(null, "Revista agregada con éxito");
                } else {
                    JOptionPane.showMessageDialog(null, "Error al agregar la revista");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce valores válidos para los campos numéricos.");
            }
        }
    }
    private void agregardvds() {
         // Crear un panel para los campos de entrada
         JPanel panel = new JPanel(new GridLayout(5, 2, 10, 10)); // 5 filas y 2 columnas para etiquetas y campos

         panel.add(new JLabel("Título:"));
         JTextField tituloField = new JTextField();
         panel.add(tituloField);

         panel.add(new JLabel("Director:"));
         JTextField directorField = new JTextField();
         panel.add(directorField);

         panel.add(new JLabel("Género:"));
         // Dropdown list para el género
         String[] generos = { "Acción", "Comedia", "Drama", "Ciencia Ficción", "Terror", "Documental", "Fantasía", "Romance", "Aventura", "Musical" };
         JComboBox<String> generoDropdown = new JComboBox<>(generos);
         panel.add(generoDropdown);

         panel.add(new JLabel("Duración (HH:MM:SS):"));
         JTextField duracionField = new JTextField();
         panel.add(duracionField);

         panel.add(new JLabel("Unidades:"));
         JTextField unidadesField = new JTextField();
         panel.add(unidadesField);

         // Mostrar el panel en un cuadro de diálogo
         int result = JOptionPane.showConfirmDialog(
             null,
             panel,
             "Agregar DVD",
             JOptionPane.OK_CANCEL_OPTION,
             JOptionPane.PLAIN_MESSAGE
         );

         if (result == JOptionPane.OK_OPTION) {
             try {
                 // Obtener los valores ingresados
                 String titulo = tituloField.getText();
                 String director = directorField.getText();
                 // Obtener el género seleccionado
                 String genero = generoDropdown.getSelectedItem().toString();
                 String duracion = duracionField.getText();
                 int unidades = Integer.parseInt(unidadesField.getText());

                 // Llamar al método de la base de datos
                 SqlMateriales modSql = new SqlMateriales();
                 boolean agregado = modSql.agregarDVDs(titulo, director, duracion, genero, unidades);

                 // Mostrar resultado
                 if (agregado) {
                     JOptionPane.showMessageDialog(null, "DVD agregado con éxito");
                 } else {
                     JOptionPane.showMessageDialog(null, "Error al agregar el DVD");
                 }
             } catch (NumberFormatException e) {
                 JOptionPane.showMessageDialog(null, "Por favor, introduce valores válidos para los campos numéricos.");
             }
         }
     }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfigurar;
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnDevoluciones;
    private javax.swing.JButton btnIngEjem;
    private javax.swing.JButton btnMora;
    private javax.swing.JButton btnReContraseña;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnprestamos;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

  
}
